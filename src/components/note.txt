import React, { useState, useEffect } from "react";
import "./App.css";
import { FaEdit, FaTrash } from "react-icons/fa";

import Modal from "./modal/modal-component";

const App = () => {
  const [showForm, setShowForm] = useState(false);
  const [notes, setNotes] = useState([]);
  const [selectedNote, setSelectedNote] = useState(null);

  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const storedNotes = JSON.parse(localStorage.getItem("notes")) || [];
    setNotes(storedNotes);
  }, []);

  const saveNotesToLocalStorage = (notes) => {
    localStorage.setItem("notes", JSON.stringify(notes));
  };

  const getRandomColor = () => {
    const letters = "0123456789ABCDF";
    let colors = "#";
    for (let i = 0; i < 6; i++) {
      colors += letters[Math.floor(Math.random() * 16)];
    }
    return colors;
  };

  const addSitckyNote = () => {
    const newColor = getRandomColor();
    setNotes([...notes, newColor]);
  };

  const handleAddNote = (title, description) => {
    const newNote = {
      id: Date.now(),
      text: title,
      description: description,
      color: getRandomColor(),
    };
    const updatedNotes = [...notes, newNote];
    setNotes(updatedNotes);
    saveNotesToLocalStorage(updatedNotes);

    setShowForm(false);
  };

  const handleEditNote = (note) => {
    setSelectedNote(note);
    setShowForm(true);
  };

  console.log(notes);

  const handleUpdateNote = (title, description) => {
    const updatedNotes = notes.map((note) =>
      note.id === selectedNote.id
        ? { ...note, text: title, description: description }
        : note
    );
    setNotes(updatedNotes);
    saveNotesToLocalStorage(updatedNotes);
    setSelectedNote(null);
    setShowForm(false);
  };

  const handleDeleteNote = (id) => {
    const updatedNotes = notes.filter((note) => note.id !== id);
    setNotes(updatedNotes);
    saveNotesToLocalStorage(updatedNotes);
    setSelectedNote(null);
    // setNoteText("");
    setShowForm(false);
  };

  const handleClick = () => {
    setShowForm(true);
    addSitckyNote(true);
  };

  console.log("selectedNote", selectedNote);
  return (
    <div className="App">
      <h1>Sticky Notes App</h1>
      {showForm && (
        <div className="note-form">
          <button onClick={() => setIsModalOpen(true)}>
            {selectedNote ? "Update Note" : "Add Note"}
          </button>
          <Modal
            isOpen={isModalOpen}
            onClose={() => setIsModalOpen(false)}
            onAddNote={handleAddNote}
            handleUpdateNote={handleUpdateNote}
            data={selectedNote}
          />
        </div>
      )}
      {!showForm && (
        <button onClick={handleClick} className="add-button">
          +
        </button>
      )}
      <div className="note-list">
        {notes?.map((note) => (
          <div
            key={note.id}
            className="note"
            style={{ backgroundColor: note.color }}
          >
            <span>{note.text}</span>
            <span>{note.description}</span>
            <div className="note-actions">
              <button onClick={() => handleEditNote(note)}>
                <FaEdit onClick={() => handleEditNote(note)} />
              </button>

              <button onClick={() => handleDeleteNote(note.id)}>
                <FaTrash onClick={() => handleDeleteNote(note.id)} />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default App;
